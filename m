Return-path: <linux-media-owner@vger.kernel.org>
Received: from mail-vc0-f182.google.com ([209.85.220.182]:65098 "EHLO
	mail-vc0-f182.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751278AbbBKCaZ (ORCPT
	<rfc822;linux-media@vger.kernel.org>);
	Tue, 10 Feb 2015 21:30:25 -0500
Received: by mail-vc0-f182.google.com with SMTP id id10so267604vcb.13
        for <linux-media@vger.kernel.org>; Tue, 10 Feb 2015 18:30:24 -0800 (PST)
Received: from mail-vc0-f171.google.com (mail-vc0-f171.google.com. [209.85.220.171])
        by mx.google.com with ESMTPSA id t6sm2327105vdo.19.2015.02.10.18.30.23
        for <linux-media@vger.kernel.org>
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 10 Feb 2015 18:30:23 -0800 (PST)
Received: by mail-vc0-f171.google.com with SMTP id kv19so299693vcb.2
        for <linux-media@vger.kernel.org>; Tue, 10 Feb 2015 18:30:23 -0800 (PST)
MIME-Version: 1.0
Date: Tue, 10 Feb 2015 18:30:22 -0800
Message-ID: <CAPUS086PtXoe34+V5L01BNMfBrAfTsrfS-e6_Auo_7=NWTJ6vA@mail.gmail.com>
Subject: [PATCH] media: vivid: adding YU12, YV12, NV12, NV21 formats
From: Miguel Casas-Sanchez <mcasas@chromium.org>
To: linux-media@vger.kernel.org, hverkuil@xs4all.nl
Content-Type: multipart/mixed; boundary=001a11332f080e9301050ec6c950
Sender: linux-media-owner@vger.kernel.org
List-ID: <linux-media.vger.kernel.org>

--001a11332f080e9301050ec6c950
Content-Type: text/plain; charset=UTF-8

Following our previous discussions, attached is the patch adding
vertical + horizontal subsampled formats to vivid and applying to
those in the subject as defined in [1,2]. These formats are tightly
packed N planar, because they provide chroma(s) as a separate array,
but they are not mplanar yet, as suggested.

The modus operandi is to let tpg_fillbuffer() create a YUYV packed
format per pattern line as usual and apply downsampling if needed
immediately afterwards, in a new function called
tpg_apply_downsampling(). This one will unpack as needed, and average
the chroma samples (note that luma samples are never downsampled).
(Some provisions for horizontal downsampling are made, so I can follow
up with e.g. YUV410 etc formats, please understand in this context).

Writing the text information on top of the produced pattern also needs
a bit of retouch.

I'm not familiar at all with the review process here :) can anyone
point me to some info about it? Like, what happens now, how can we
iterate, how are comments accumulated, who approves or disapproves...?

FTR, the patches live in [2], directly against kernel sources. Is this
a good, bad idea?

[1] http://linuxtv.org/downloads/v4l-dvb-apis/re30.html
[2] http://linuxtv.org/downloads/v4l-dvb-apis/re24.html
[3] https://github.com/miguelao/linux/tree/adding_yu12_yv12_nv12_nv21_

M

--001a11332f080e9301050ec6c950
Content-Type: text/x-patch; charset=US-ASCII;
	name="adding_yu12_yv12_nv12_nv21_to_vivid.patch"
Content-Disposition: attachment;
	filename="adding_yu12_yv12_nv12_nv21_to_vivid.patch"
Content-Transfer-Encoding: base64
X-Attachment-Id: f_i603lfs80

ZGlmZiAtLWdpdCBhL2RyaXZlcnMvbWVkaWEvcGxhdGZvcm0vdml2aWQvdml2aWQta3RocmVhZC1j
YXAuYyBiL2RyaXZlcnMvbWVkaWEvcGxhdGZvcm0vdml2aWQvdml2aWQta3RocmVhZC1jYXAuYwpp
bmRleCAzOWE2N2NmLi45M2M2Y2EzIDEwMDY0NAotLS0gYS9kcml2ZXJzL21lZGlhL3BsYXRmb3Jt
L3ZpdmlkL3ZpdmlkLWt0aHJlYWQtY2FwLmMKKysrIGIvZHJpdmVycy9tZWRpYS9wbGF0Zm9ybS92
aXZpZC92aXZpZC1rdGhyZWFkLWNhcC5jCkBAIC02NjksOCArNjY5LDcgQEAgc3RhdGljIHZvaWQg
dml2aWRfdGhyZWFkX3ZpZF9jYXBfdGljayhzdHJ1Y3Qgdml2aWRfZGV2ICpkZXYsIGludCBkcm9w
cGVkX2J1ZnMpCiAJaWYgKHZpZF9jYXBfYnVmKSB7CiAJCS8qIEZpbGwgYnVmZmVyICovCiAJCXZp
dmlkX2ZpbGxidWZmKGRldiwgdmlkX2NhcF9idWYpOwotCQlkcHJpbnRrKGRldiwgMSwgImZpbGxl
ZCBidWZmZXIgJWRcbiIsCi0JCQl2aWRfY2FwX2J1Zi0+dmIudjRsMl9idWYuaW5kZXgpOworCQlk
cHJpbnRrKGRldiwgMSwgImZpbGxlZCBidWZmZXIgJWRcbiIsIHZpZF9jYXBfYnVmLT52Yi52NGwy
X2J1Zi5pbmRleCk7CiAKIAkJLyogSGFuZGxlIG92ZXJsYXkgKi8KIAkJaWYgKGRldi0+b3Zlcmxh
eV9jYXBfb3duZXIgJiYgZGV2LT5mYl9jYXAuYmFzZSAmJgpAQCAtNjc5LDggKzY3OCw3IEBAIHN0
YXRpYyB2b2lkIHZpdmlkX3RocmVhZF92aWRfY2FwX3RpY2soc3RydWN0IHZpdmlkX2RldiAqZGV2
LCBpbnQgZHJvcHBlZF9idWZzKQogCiAJCXZiMl9idWZmZXJfZG9uZSgmdmlkX2NhcF9idWYtPnZi
LCBkZXYtPmRxYnVmX2Vycm9yID8KIAkJCQlWQjJfQlVGX1NUQVRFX0VSUk9SIDogVkIyX0JVRl9T
VEFURV9ET05FKTsKLQkJZHByaW50ayhkZXYsIDIsICJ2aWRfY2FwIGJ1ZmZlciAlZCBkb25lXG4i
LAotCQkJCXZpZF9jYXBfYnVmLT52Yi52NGwyX2J1Zi5pbmRleCk7CisJCWRwcmludGsoZGV2LCAy
LCAidmlkX2NhcCBidWZmZXIgJWQgZG9uZVxuIiwgdmlkX2NhcF9idWYtPnZiLnY0bDJfYnVmLmlu
ZGV4KTsKIAl9CiAKIAlpZiAodmJpX2NhcF9idWYpIHsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvbWVk
aWEvcGxhdGZvcm0vdml2aWQvdml2aWQtdHBnLmMgYi9kcml2ZXJzL21lZGlhL3BsYXRmb3JtL3Zp
dmlkL3ZpdmlkLXRwZy5jCmluZGV4IGZjOWM2NTMuLjU2YWYyODkgMTAwNjQ0Ci0tLSBhL2RyaXZl
cnMvbWVkaWEvcGxhdGZvcm0vdml2aWQvdml2aWQtdHBnLmMKKysrIGIvZHJpdmVycy9tZWRpYS9w
bGF0Zm9ybS92aXZpZC92aXZpZC10cGcuYwpAQCAtMTkzLDYgKzE5MywxMCBAQCBib29sIHRwZ19z
X2ZvdXJjYyhzdHJ1Y3QgdHBnX2RhdGEgKnRwZywgdTMyIGZvdXJjYykKIAljYXNlIFY0TDJfUElY
X0ZNVF9VWVZZOgogCWNhc2UgVjRMMl9QSVhfRk1UX1lWWVU6CiAJY2FzZSBWNEwyX1BJWF9GTVRf
VllVWToKKwljYXNlIFY0TDJfUElYX0ZNVF9OVjEyOgorCWNhc2UgVjRMMl9QSVhfRk1UX05WMjE6
CisJY2FzZSBWNEwyX1BJWF9GTVRfWVVWNDIwOgorCWNhc2UgVjRMMl9QSVhfRk1UX1lWVTQyMDoK
IAkJdHBnLT5pc195dXYgPSB0cnVlOwogCQlicmVhazsKIAlkZWZhdWx0OgpAQCAtMjI0LDEyICsy
MjgsMzIgQEAgYm9vbCB0cGdfc19mb3VyY2Moc3RydWN0IHRwZ19kYXRhICp0cGcsIHUzMiBmb3Vy
Y2MpCiAJY2FzZSBWNEwyX1BJWF9GTVRfQUJHUjMyOgogCQl0cGctPnR3b3BpeGVsc2l6ZVswXSA9
IDIgKiA0OwogCQlicmVhazsKKwljYXNlIFY0TDJfUElYX0ZNVF9OVjEyOgorCWNhc2UgVjRMMl9Q
SVhfRk1UX05WMjE6CisJY2FzZSBWNEwyX1BJWF9GTVRfWVVWNDIwOgorCWNhc2UgVjRMMl9QSVhf
Rk1UX1lWVTQyMDoKKwkJdHBnLT50d29waXhlbHNpemVbMF0gPSAzOworCQlicmVhazsKIAljYXNl
IFY0TDJfUElYX0ZNVF9OVjE2TToKIAljYXNlIFY0TDJfUElYX0ZNVF9OVjYxTToKIAkJdHBnLT50
d29waXhlbHNpemVbMF0gPSAyOwogCQl0cGctPnR3b3BpeGVsc2l6ZVsxXSA9IDI7CiAJCWJyZWFr
OwogCX0KKworCXN3aXRjaCAoZm91cmNjKSB7CisJY2FzZSBWNEwyX1BJWF9GTVRfTlYxMjoKKwlj
YXNlIFY0TDJfUElYX0ZNVF9OVjIxOgorCWNhc2UgVjRMMl9QSVhfRk1UX1lVVjQyMDoKKwljYXNl
IFY0TDJfUElYX0ZNVF9ZVlU0MjA6CisJCXRwZy0+dmVydGljYWxfZG93bnNhbXBsaW5nID0gMjsK
KwkJdHBnLT5ob3Jpem9udGFsX2Rvd25zYW1wbGluZyA9IDI7CisJCWJyZWFrOworCWRlZmF1bHQ6
CisJCXRwZy0+dmVydGljYWxfZG93bnNhbXBsaW5nID0gMDsKKwkJdHBnLT5ob3Jpem9udGFsX2Rv
d25zYW1wbGluZyA9IDA7CisJfQorCiAJcmV0dXJuIHRydWU7CiB9CiAKQEAgLTI3MSw2ICsyOTUs
MTIgQEAgdm9pZCB0cGdfcmVzZXRfc291cmNlKHN0cnVjdCB0cGdfZGF0YSAqdHBnLCB1bnNpZ25l
ZCB3aWR0aCwgdW5zaWduZWQgaGVpZ2h0LAogCXRwZy0+cmVjYWxjX3NxdWFyZV9ib3JkZXIgPSB0
cnVlOwogfQogCisvKiBWZXJ0aWNhbGx5IGRvd25zYW1wbGVkIHBpeGVsIGZvcm1hdHMgdXNlIFlV
WVYgYXMgaW50ZXJtZWRpYXRlLiAqLworc3RhdGljIHVuc2lnbmVkIHRwZ19nZXRfcGFja2VkX3R3
b3BpeHNpemUoc3RydWN0IHRwZ19kYXRhICp0cGcsIHVuc2lnbmVkIHApCit7CisJcmV0dXJuIHRw
Zy0+dmVydGljYWxfZG93bnNhbXBsaW5nID8gNDogdHBnLT50d29waXhlbHNpemVbcF07Cit9CisK
IHN0YXRpYyBlbnVtIHRwZ19jb2xvciB0cGdfZ2V0X3RleHRiZ19jb2xvcihzdHJ1Y3QgdHBnX2Rh
dGEgKnRwZykKIHsKIAlzd2l0Y2ggKHRwZy0+cGF0dGVybikgewpAQCAtNjcxLDcgKzcwMSwxNSBA
QCBzdGF0aWMgdm9pZCBnZW5fdHdvcGl4KHN0cnVjdCB0cGdfZGF0YSAqdHBnLAogCQlidWZbMF1b
b2Zmc2V0XSA9IHJfeTsKIAkJYnVmWzFdW29mZnNldF0gPSBvZGQgPyBnX3UgOiBiX3Y7CiAJCWJy
ZWFrOwotCisJLyoKKwkgKiBGb3IgdGhlc2UgY2FzZXMgd2UgY29tcG9zZSBhIFlVWVYgbWFjcm9w
aXhlbC4gVGhleSB3aWxsIGJlIHZlcnRpY2FsbGx5CisJICogZG93bnNhbXBsZWQgbGF0ZXIgb24u
CisJICovCisJY2FzZSBWNEwyX1BJWF9GTVRfTlYxMjoKKwljYXNlIFY0TDJfUElYX0ZNVF9OVjIx
OgorCWNhc2UgVjRMMl9QSVhfRk1UX1lVVjQyMDoKKwljYXNlIFY0TDJfUElYX0ZNVF9ZVlU0MjA6
CisJCW9mZnNldCA9IG9kZCAqIHRwZ19nZXRfcGFja2VkX3R3b3BpeHNpemUodHBnLCAwKSAvIDI7
CiAJY2FzZSBWNEwyX1BJWF9GTVRfWVVZVjoKIAkJYnVmWzBdW29mZnNldF0gPSByX3k7CiAJCWJ1
ZlswXVtvZmZzZXQgKyAxXSA9IG9kZCA/IGJfdiA6IGdfdTsKQEAgLTk5OCw5ICsxMDM2LDggQEAg
c3RhdGljIHZvaWQgdHBnX3ByZWNhbGN1bGF0ZV9saW5lKHN0cnVjdCB0cGdfZGF0YSAqdHBnKQog
CQkJZ2VuX3R3b3BpeCh0cGcsIHBpeCwgdHBnLT5oZmxpcCA/IGNvbG9yMiA6IGNvbG9yMSwgMCk7
CiAJCQlnZW5fdHdvcGl4KHRwZywgcGl4LCB0cGctPmhmbGlwID8gY29sb3IxIDogY29sb3IyLCAx
KTsKIAkJCWZvciAocCA9IDA7IHAgPCB0cGctPnBsYW5lczsgcCsrKSB7Ci0JCQkJdW5zaWduZWQg
dHdvcGl4c2l6ZSA9IHRwZy0+dHdvcGl4ZWxzaXplW3BdOworCQkJCWNvbnN0IHVuc2lnbmVkIHR3
b3BpeHNpemUgPSB0cGdfZ2V0X3BhY2tlZF90d29waXhzaXplKHRwZywgcCk7CiAJCQkJdTggKnBv
cyA9IHRwZy0+bGluZXNbcGF0XVtwXSArIHggKiB0d29waXhzaXplIC8gMjsKLQogCQkJCW1lbWNw
eShwb3MsIHBpeFtwXSwgdHdvcGl4c2l6ZSk7CiAJCQl9CiAJCX0KQEAgLTEwMTEsNyArMTA0OCw3
IEBAIHN0YXRpYyB2b2lkIHRwZ19wcmVjYWxjdWxhdGVfbGluZShzdHJ1Y3QgdHBnX2RhdGEgKnRw
ZykKIAkJZ2VuX3R3b3BpeCh0cGcsIHBpeCwgY29udHJhc3QsIDApOwogCQlnZW5fdHdvcGl4KHRw
ZywgcGl4LCBjb250cmFzdCwgMSk7CiAJCWZvciAocCA9IDA7IHAgPCB0cGctPnBsYW5lczsgcCsr
KSB7Ci0JCQl1bnNpZ25lZCB0d29waXhzaXplID0gdHBnLT50d29waXhlbHNpemVbcF07CisJCQlj
b25zdCB1bnNpZ25lZCB0d29waXhzaXplID0gdHBnX2dldF9wYWNrZWRfdHdvcGl4c2l6ZSh0cGcs
IHApOwogCQkJdTggKnBvcyA9IHRwZy0+Y29udHJhc3RfbGluZVtwXSArIHggKiB0d29waXhzaXpl
IC8gMjsKIAogCQkJbWVtY3B5KHBvcywgcGl4W3BdLCB0d29waXhzaXplKTsKQEAgLTEwMjMsOSAr
MTA2MCw4IEBAIHN0YXRpYyB2b2lkIHRwZ19wcmVjYWxjdWxhdGVfbGluZShzdHJ1Y3QgdHBnX2Rh
dGEgKnRwZykKIAkJZ2VuX3R3b3BpeCh0cGcsIHBpeCwgVFBHX0NPTE9SXzEwMF9CTEFDSywgMCk7
CiAJCWdlbl90d29waXgodHBnLCBwaXgsIFRQR19DT0xPUl8xMDBfQkxBQ0ssIDEpOwogCQlmb3Ig
KHAgPSAwOyBwIDwgdHBnLT5wbGFuZXM7IHArKykgewotCQkJdW5zaWduZWQgdHdvcGl4c2l6ZSA9
IHRwZy0+dHdvcGl4ZWxzaXplW3BdOworCQkJY29uc3QgdW5zaWduZWQgdHdvcGl4c2l6ZSA9IHRw
Z19nZXRfcGFja2VkX3R3b3BpeHNpemUodHBnLCBwKTsKIAkJCXU4ICpwb3MgPSB0cGctPmJsYWNr
X2xpbmVbcF0gKyB4ICogdHdvcGl4c2l6ZSAvIDI7Ci0KIAkJCW1lbWNweShwb3MsIHBpeFtwXSwg
dHdvcGl4c2l6ZSk7CiAJCX0KIAl9CkBAIC0xMDM1LDcgKzEwNzEsNyBAQCBzdGF0aWMgdm9pZCB0
cGdfcHJlY2FsY3VsYXRlX2xpbmUoc3RydWN0IHRwZ19kYXRhICp0cGcpCiAJCWdlbl90d29waXgo
dHBnLCBwaXgsIFRQR19DT0xPUl9SQU5ET00sIDApOwogCQlnZW5fdHdvcGl4KHRwZywgcGl4LCBU
UEdfQ09MT1JfUkFORE9NLCAxKTsKIAkJZm9yIChwID0gMDsgcCA8IHRwZy0+cGxhbmVzOyBwKysp
IHsKLQkJCXVuc2lnbmVkIHR3b3BpeHNpemUgPSB0cGctPnR3b3BpeGVsc2l6ZVtwXTsKKwkJCWNv
bnN0IHVuc2lnbmVkIHR3b3BpeHNpemUgPSB0cGdfZ2V0X3BhY2tlZF90d29waXhzaXplKHRwZywg
cCk7CiAJCQl1OCAqcG9zID0gdHBnLT5yYW5kb21fbGluZVtwXSArIHggKiB0d29waXhzaXplIC8g
MjsKIAogCQkJbWVtY3B5KHBvcywgcGl4W3BdLCB0d29waXhzaXplKTsKQEAgLTEwODEsOCArMTEx
Nyw4IEBAIHZvaWQgdHBnX2dlbl90ZXh0KHN0cnVjdCB0cGdfZGF0YSAqdHBnLCB1OCAqYmFzZXBb
VFBHX01BWF9QTEFORVNdWzJdLAogCQlkaXYgPSAyOwogCiAJZm9yIChwID0gMDsgcCA8IHRwZy0+
cGxhbmVzOyBwKyspIHsKLQkJLyogUHJpbnQgc3RyZWFtIHRpbWUgKi8KLSNkZWZpbmUgUFJJTlRT
VFIoUElYVFlQRSkgZG8gewlcCisJCS8qIFByaW50IHRleHQgKi8KKyNkZWZpbmUgUFJJTlRTVFIo
UElYVFlQRSwgZHN0X3B0ciwgc3RyaWRlKSBkbyB7CVwKIAlQSVhUWVBFIGZnOwlcCiAJUElYVFlQ
RSBiZzsJXAogCW1lbWNweSgmZmcsIHRwZy0+dGV4dGZnW3BdLCBzaXplb2YoUElYVFlQRSkpOwlc
CkBAIC0xMDkwLDMyICsxMTI2LDMxIEBAIHZvaWQgdHBnX2dlbl90ZXh0KHN0cnVjdCB0cGdfZGF0
YSAqdHBnLCB1OCAqYmFzZXBbVFBHX01BWF9QTEFORVNdWzJdLAogCVwKIAlmb3IgKGxpbmUgPSBm
aXJzdDsgbGluZSA8IDE2OyBsaW5lICs9IHN0ZXApIHsJXAogCQlpbnQgbCA9IHRwZy0+dmZsaXAg
PyAxNSAtIGxpbmUgOiBsaW5lOyBcCi0JCVBJWFRZUEUgKnBvcyA9IChQSVhUWVBFICopKGJhc2Vw
W3BdW2xpbmUgJiAxXSArIFwKLQkJCSAgICAgICAoKHkgKiBzdGVwICsgbCkgLyBkaXYpICogdHBn
LT5ieXRlc3BlcmxpbmVbcF0gKyBcCisJCVBJWFRZUEUgKnBvcyA9IChQSVhUWVBFICopKChkc3Rf
cHRyKVtsaW5lICYgMV0gKwlcCisJCQkgICAgICAgKCh5ICogc3RlcCArIGwpIC8gZGl2KSAqIHN0
cmlkZSArIFwKIAkJCSAgICAgICB4ICogc2l6ZW9mKFBJWFRZUEUpKTsJXAotCQl1bnNpZ25lZCBz
OwlcCiAJXAorCQl1bnNpZ25lZCBzOwlcCiAJCWZvciAocyA9IDA7IHMgPCBsZW47IHMrKykgewlc
CiAJCQl1OCBjaHIgPSBmb250OHgxNlt0ZXh0W3NdICogMTYgKyBsaW5lXTsJXAotCVwKIAkJCWlm
ICh0cGctPmhmbGlwKSB7IFwKLQkJCQlwb3NbN10gPSAoY2hyICYgKDB4MDEgPDwgNykgPyBmZyA6
IGJnKTsJXAotCQkJCXBvc1s2XSA9IChjaHIgJiAoMHgwMSA8PCA2KSA/IGZnIDogYmcpOwlcCi0J
CQkJcG9zWzVdID0gKGNociAmICgweDAxIDw8IDUpID8gZmcgOiBiZyk7CVwKLQkJCQlwb3NbNF0g
PSAoY2hyICYgKDB4MDEgPDwgNCkgPyBmZyA6IGJnKTsJXAotCQkJCXBvc1szXSA9IChjaHIgJiAo
MHgwMSA8PCAzKSA/IGZnIDogYmcpOwlcCi0JCQkJcG9zWzJdID0gKGNociAmICgweDAxIDw8IDIp
ID8gZmcgOiBiZyk7CVwKLQkJCQlwb3NbMV0gPSAoY2hyICYgKDB4MDEgPDwgMSkgPyBmZyA6IGJn
KTsJXAotCQkJCXBvc1swXSA9IChjaHIgJiAoMHgwMSA8PCAwKSA/IGZnIDogYmcpOwlcCisJCQkJ
cG9zWzddID0gKGNociAmICgweDAxIDw8IDcpID8gZmcgOiBiZyk7IFwKKwkJCQlwb3NbNl0gPSAo
Y2hyICYgKDB4MDEgPDwgNikgPyBmZyA6IGJnKTsgXAorCQkJCXBvc1s1XSA9IChjaHIgJiAoMHgw
MSA8PCA1KSA/IGZnIDogYmcpOyBcCisJCQkJcG9zWzRdID0gKGNociAmICgweDAxIDw8IDQpID8g
ZmcgOiBiZyk7IFwKKwkJCQlwb3NbM10gPSAoY2hyICYgKDB4MDEgPDwgMykgPyBmZyA6IGJnKTsg
XAorCQkJCXBvc1syXSA9IChjaHIgJiAoMHgwMSA8PCAyKSA/IGZnIDogYmcpOyBcCisJCQkJcG9z
WzFdID0gKGNociAmICgweDAxIDw8IDEpID8gZmcgOiBiZyk7IFwKKwkJCQlwb3NbMF0gPSAoY2hy
ICYgKDB4MDEgPDwgMCkgPyBmZyA6IGJnKTsgXAogCQkJfSBlbHNlIHsgXAotCQkJCXBvc1swXSA9
IChjaHIgJiAoMHgwMSA8PCA3KSA/IGZnIDogYmcpOwlcCi0JCQkJcG9zWzFdID0gKGNociAmICgw
eDAxIDw8IDYpID8gZmcgOiBiZyk7CVwKLQkJCQlwb3NbMl0gPSAoY2hyICYgKDB4MDEgPDwgNSkg
PyBmZyA6IGJnKTsJXAotCQkJCXBvc1szXSA9IChjaHIgJiAoMHgwMSA8PCA0KSA/IGZnIDogYmcp
OwlcCi0JCQkJcG9zWzRdID0gKGNociAmICgweDAxIDw8IDMpID8gZmcgOiBiZyk7CVwKLQkJCQlw
b3NbNV0gPSAoY2hyICYgKDB4MDEgPDwgMikgPyBmZyA6IGJnKTsJXAotCQkJCXBvc1s2XSA9IChj
aHIgJiAoMHgwMSA8PCAxKSA/IGZnIDogYmcpOwlcCi0JCQkJcG9zWzddID0gKGNociAmICgweDAx
IDw8IDApID8gZmcgOiBiZyk7CVwKKwkJCQlwb3NbMF0gPSAoY2hyICYgKDB4MDEgPDwgNykgPyBm
ZyA6IGJnKTsgXAorCQkJCXBvc1sxXSA9IChjaHIgJiAoMHgwMSA8PCA2KSA/IGZnIDogYmcpOyBc
CisJCQkJcG9zWzJdID0gKGNociAmICgweDAxIDw8IDUpID8gZmcgOiBiZyk7IFwKKwkJCQlwb3Nb
M10gPSAoY2hyICYgKDB4MDEgPDwgNCkgPyBmZyA6IGJnKTsgXAorCQkJCXBvc1s0XSA9IChjaHIg
JiAoMHgwMSA8PCAzKSA/IGZnIDogYmcpOyBcCisJCQkJcG9zWzVdID0gKGNociAmICgweDAxIDw8
IDIpID8gZmcgOiBiZyk7IFwKKwkJCQlwb3NbNl0gPSAoY2hyICYgKDB4MDEgPDwgMSkgPyBmZyA6
IGJnKTsgXAorCQkJCXBvc1s3XSA9IChjaHIgJiAoMHgwMSA8PCAwKSA/IGZnIDogYmcpOyBcCiAJ
CQl9IFwKIAlcCiAJCQlwb3MgKz0gdHBnLT5oZmxpcCA/IC04IDogODsJXApAQCAtMTEyMywxNSAr
MTE1OCwyNSBAQCB2b2lkIHRwZ19nZW5fdGV4dChzdHJ1Y3QgdHBnX2RhdGEgKnRwZywgdTggKmJh
c2VwW1RQR19NQVhfUExBTkVTXVsyXSwKIAl9CVwKIH0gd2hpbGUgKDApCiAKLQkJc3dpdGNoICh0
cGctPnR3b3BpeGVsc2l6ZVtwXSkgewotCQljYXNlIDI6Ci0JCQlQUklOVFNUUih1OCk7IGJyZWFr
OwotCQljYXNlIDQ6Ci0JCQlQUklOVFNUUih1MTYpOyBicmVhazsKLQkJY2FzZSA2OgotCQkJUFJJ
TlRTVFIoeDI0KTsgYnJlYWs7Ci0JCWNhc2UgODoKLQkJCVBSSU5UU1RSKHUzMik7IGJyZWFrOwor
CQlpZiAoIXRwZy0+dmVydGljYWxfZG93bnNhbXBsaW5nKSB7CisJCQlzd2l0Y2ggKHRwZy0+dHdv
cGl4ZWxzaXplW3BdKSB7CisJCQljYXNlIDI6CisJCQkJUFJJTlRTVFIodTgsIGJhc2VwW3BdLCB0
cGctPmJ5dGVzcGVybGluZVtwXSk7IGJyZWFrOworCQkJY2FzZSA0OgorCQkJCVBSSU5UU1RSKHUx
NiwgYmFzZXBbcF0sIHRwZy0+Ynl0ZXNwZXJsaW5lW3BdKTsgYnJlYWs7CisJCQljYXNlIDY6CisJ
CQkJUFJJTlRTVFIoeDI0LCBiYXNlcFtwXSwgdHBnLT5ieXRlc3BlcmxpbmVbcF0pOyBicmVhazsK
KwkJCWNhc2UgODoKKwkJCQlQUklOVFNUUih1MzIsIGJhc2VwW3BdLCB0cGctPmJ5dGVzcGVybGlu
ZVtwXSk7IGJyZWFrOworCQkJfQorCQl9IGVsc2UgeworCQkJLyogdHBnLT50d29waXhlbHNpemVb
cF0gaXMgMyBmb3IgdGhlIGRlZmluZWQgZm9ybWF0cyBzbyBmYXIuICovCisJCQlpZiAodHBnLT50
d29waXhlbHNpemVbcF0gIT0gMykgeworCQkJCXByaW50ayhLRVJOX1dBUk5JTkcgIlVuc3VwcG9y
dGVkIHR3b3BpeGVsc2l6ZSIpOworCQkJCXJldHVybjsKKwkJCX0KKwkJCVBSSU5UU1RSKHU4LCBi
YXNlcFtwXSwgdHBnLT5jb21wb3NlLndpZHRoKTsKKwkJCS8vIFRPRE8obWNhc2FzKTogZmlndXJl
IG91dCB3aGF0IHRvIGRvIHdpdGggQ2hyb21hIHBsYW5lcy4KIAkJfQogCX0KIH0KQEAgLTE1NDks
NCArMTU5NCwxMTQgQEAgdm9pZCB0cGdfZmlsbGJ1ZmZlcihzdHJ1Y3QgdHBnX2RhdGEgKnRwZywg
djRsMl9zdGRfaWQgc3RkLCB1bnNpZ25lZCBwLCB1OCAqdmJ1ZikKIAkJCQkoaGFjdCBeIHZhY3Qg
XiBmKTsKIAkJfQogCX0KKworICB0cGdfYXBwbHlfZG93bnNhbXBsaW5nKHRwZywgc3RkLCBwLCB2
YnVmKTsKK30KKworLyoKKyAqIEFwcGx5IGRvd25zYW1wbGluZyhzKS4gQXNzdW1lcyB0aGF0IHBh
dHRlcm4gbGluZXMgaGF2ZSBiZWVuIGdlbmVyYXRlZCBpbgorICogcGFja2VkIFlVWVYgYW5kIHdy
aXR0ZW4gaW4gdHBnLT5saW5lczogd2UgdW5wYWNrIHRoZW0gaW4gdGhlIGFwcHJvcHJpYXRlCisg
KiBwbGFuZSBsb2NhdGlvbnMsIHdoaWNoIGRlcGVuZCBvbiB0aGUgY29uY3JldGUgZm9ybWF0IGFu
ZCBpdHMgcGxhbmFyaXR5CisgKiBhbmQgY2hyb21hIHBhY2thZ2luZy4KKyAqLwordm9pZCB0cGdf
YXBwbHlfZG93bnNhbXBsaW5nKHN0cnVjdCB0cGdfZGF0YSAqdHBnLCB2NGwyX3N0ZF9pZCBzdGQs
IHVuc2lnbmVkIHAsCisJCXU4ICp2YnVmKQoreworCXU4KiB5X3B0ciA9IHZidWY7CisJdTgqIGNo
cm9tYXNfc3RhcnQgPSB5X3B0ciArICh0cGctPmNvbXBvc2UuaGVpZ2h0ICogdHBnLT5jb21wb3Nl
LndpZHRoKTsKKwl1OCogdV9wdHI7CisJdTgqIHZfcHRyOworCXU4IHVfcHRyX3N0ZXAgPSAxOwor
CXU4IHZfcHRyX3N0ZXAgPSAxOworCWludCB5OworCisJaWYgKHRwZy0+dmVydGljYWxfZG93bnNh
bXBsaW5nID09IDApCisJCXJldHVybjsKKwlpZiAodHBnLT52ZXJ0aWNhbF9kb3duc2FtcGxpbmcg
PiAyKSB7CisJCXByaW50ayhLRVJOX1dBUk5JTkcgIlZlcnRpY2FsIGRvd25zYW1wbGluZyBieSA+
IDIgbm90IGltcGxlbWVudGVkXG4iKTsKKwkJcmV0dXJuOworCX0KKwlpZiAodHBnLT5ob3Jpem9u
dGFsX2Rvd25zYW1wbGluZyA+IDIpIHsKKwkJcHJpbnRrKEtFUk5fV0FSTklORyAiSG9yaXpvbnRh
bCBkb3duc2FtcGxpbmcgYnkgPiAyIG5vdCBpbXBsZW1lbnRlZFxuIik7CisJCXJldHVybjsKKwl9
CisJaWYgKHRwZy0+cGxhbmVzID4gMSkgeworCQlwcmludGsoS0VSTl9XQVJOSU5HICJNcGxhbmUg
dmVydGljYWxseSBkb3duc2FtcGxpbmcgbm90IGltcGxlbWVudGVkXG4iKTsKKwkJcmV0dXJuOwor
CX0KKworCXN3aXRjaCAodHBnLT5mb3VyY2MpIHsKKwljYXNlIFY0TDJfUElYX0ZNVF9ZVVY0MjA6
CisJCXVfcHRyID0gY2hyb21hc19zdGFydDsKKwkJdl9wdHIgPSBjaHJvbWFzX3N0YXJ0ICsKKwkJ
CSh0cGctPmNvbXBvc2UuaGVpZ2h0ICogdHBnLT5jb21wb3NlLndpZHRoKSAvCisJCQkoMiAqIHRw
Zy0+aG9yaXpvbnRhbF9kb3duc2FtcGxpbmcpOworCQlicmVhazsKKwljYXNlIFY0TDJfUElYX0ZN
VF9ZVlU0MjA6CisJCXZfcHRyID0gY2hyb21hc19zdGFydDsKKwkJdV9wdHIgPSBjaHJvbWFzX3N0
YXJ0ICsKKwkJCSh0cGctPmNvbXBvc2UuaGVpZ2h0ICogdHBnLT5jb21wb3NlLndpZHRoKSAvCisJ
CQkoMiAqIHRwZy0+aG9yaXpvbnRhbF9kb3duc2FtcGxpbmcpOworCQlicmVhazsKKwljYXNlIFY0
TDJfUElYX0ZNVF9OVjEyOiAgLyogTnsyMSwyMX0gYXJlIHNwZWNpYWw6IGludGVybGVhdmVkIGNo
cm9tYXMuICovCisJCXVfcHRyID0gY2hyb21hc19zdGFydDsKKwkJdl9wdHIgPSB1X3B0ciArIDE7
CisJCXVfcHRyX3N0ZXAgPSB2X3B0cl9zdGVwID0gMjsKKwkJYnJlYWs7CisJY2FzZSBWNEwyX1BJ
WF9GTVRfTlYyMToKKwkJdl9wdHIgPSBjaHJvbWFzX3N0YXJ0OworCQl1X3B0ciA9IHZfcHRyICsg
MTsKKwkJdV9wdHJfc3RlcCA9IHZfcHRyX3N0ZXAgPSAyOworCQlicmVhazsKKwlkZWZhdWx0Ogor
CQlwcmludGsoS0VSTl9FUlIgIlVua25vd24gdmVydGljYWxseSBkb3duc2FtcGxlZCBmb3JtYXRc
biIpOworCQlyZXR1cm47CisJfQorCisJLyoKKwkgKiBQZXIgbGluZTogZmV0Y2ggdGhlIHBhdHRl
cm4gbGluZSB0byB1c2UgaW4gcGFja2VkIFlVWVYsIHRoZW4gdW5wYWNrIGluCisJICogdGhlIGRz
dCBidWZmZXJzLiBWZXJ0aWNhbCBkb3duc2FtcGxpbmcgY2FuIG9ubHkgYmUgMiBvciA0IGhlcmU6
IGF2ZXJhZ2UKKwkgKiBhcy1tYW55LXJvd3Mgb2YgQ2hyb21hIGNvbXBvbmVudHMuIFNpbmNlIHdl
IHVzZSBZVVlWIGFzIHN0YXJ0aW5nIHBvaW50LAorCSAqIGhvcml6b250YWwgZG93bnNhbXBsaW5n
IG9mIDIgaXMgYSBuYXR1cmFsIG1hdGNoOyA0IHdvdWxkIG5lZWQgaG9vcHMuCisJICovCisJZm9y
ICh5ID0gMDsgeSA8IHRwZy0+Y29tcG9zZS5oZWlnaHQ7IHkgKz0gMikgeworCQl1OCogc3JjX3B0
cjsKKwkJdW5zaWduZWQgYnVmX2xpbmU7CisJCXVuc2lnbmVkIGRvd25zYW1wbGluZ19pbmRleCA9
IDA7CisJCWZvcig7IGRvd25zYW1wbGluZ19pbmRleCA8IHRwZy0+dmVydGljYWxfZG93bnNhbXBs
aW5nOworCQkJKytkb3duc2FtcGxpbmdfaW5kZXgpIHsKKwkJCWludCB4OworCisJCQkvKiBGZXRj
aCB0aGUgcGF0dGVybiBsaW5lIHRvIHVzZSBpbiBwYWNrZWQgWVVZVi4gKi8KKwkJCWJ1Zl9saW5l
ID0gdHBnX2NhbGNfYnVmZmVyX2xpbmUodHBnLCB5ICsgZG93bnNhbXBsaW5nX2luZGV4LAorCQkJ
CXRwZy0+ZmllbGQpOworCQkJc3JjX3B0ciA9IHRwZy0+bGluZXNbIHRwZ19nZXRfcGF0X2xpbmUo
dHBnLCBidWZfbGluZSkgXVswXTsKKwkJCWlmICgoZG93bnNhbXBsaW5nX2luZGV4ICUgdHBnLT52
ZXJ0aWNhbF9kb3duc2FtcGxpbmcpID09IDApIHsKKwkJCQkvKiBVbnBhY2sgeXV5diBtYWNyb3Bp
eGVsLiBfU2V0XyB0aGUgQ2hyb21hIHBsYW5lcy4gKi8KKwkJCQlmb3IgKHggPSAwOyB4IDwgMiAq
IHRwZy0+Y29tcG9zZS53aWR0aDsgeCArPSA0KSB7CisJCQkJCSp5X3B0cisrID0gKnNyY19wdHIr
KzsKKwkJCQkJKnVfcHRyID0gKnNyY19wdHIrKyAvIHRwZy0+dmVydGljYWxfZG93bnNhbXBsaW5n
OworCQkJCQl1X3B0ciArPSB1X3B0cl9zdGVwOworCQkJCQkqeV9wdHIrKyA9ICpzcmNfcHRyKys7
CisJCQkJCSp2X3B0ciA9ICpzcmNfcHRyKysgLyB0cGctPnZlcnRpY2FsX2Rvd25zYW1wbGluZzsK
KwkJCQkJdl9wdHIgKz0gdl9wdHJfc3RlcDsKKwkJCQl9CisJCQl9IGVsc2UgeworCQkJCS8qIFJl
d2luZCBVLCBWIHBvaW50ZXJzLiAqLworCQkJCXVfcHRyIC09ICh1X3B0cl9zdGVwICogdHBnLT5j
b21wb3NlLndpZHRoIC8KKwkJCQkJCXRwZy0+aG9yaXpvbnRhbF9kb3duc2FtcGxpbmcpOworCQkJ
CXZfcHRyIC09ICh2X3B0cl9zdGVwICogdHBnLT5jb21wb3NlLndpZHRoIC8KKwkJCQkJCXRwZy0+
aG9yaXpvbnRhbF9kb3duc2FtcGxpbmcpOworCQkJCS8qIFVucGFjayB5dXl2IG1hY3JvcGl4ZWwu
IF9BY2N1bXVsYXRlXyB0aGUgQ2hyb21hIHBsYW5lcy4gKi8KKwkJCQlmb3IgKHggPSAwOyB4IDwg
MiAqIHRwZy0+Y29tcG9zZS53aWR0aDsgeCArPSA0KSB7CisJCQkJCSp5X3B0cisrID0gKnNyY19w
dHIrKzsKKwkJCQkJKnVfcHRyICs9ICpzcmNfcHRyKysgLyB0cGctPnZlcnRpY2FsX2Rvd25zYW1w
bGluZzsKKwkJCQkJdV9wdHIgKz0gdV9wdHJfc3RlcDsKKwkJCQkJKnlfcHRyKysgPSAqc3JjX3B0
cisrOworCQkJCQkqdl9wdHIgKz0gKnNyY19wdHIrKyAvIHRwZy0+dmVydGljYWxfZG93bnNhbXBs
aW5nOworCQkJCQl2X3B0ciArPSB2X3B0cl9zdGVwOworCQkJCX0KKwkJCX0KKwkJfQorCX0KIH0K
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvbWVkaWEvcGxhdGZvcm0vdml2aWQvdml2aWQtdHBnLmggYi9k
cml2ZXJzL21lZGlhL3BsYXRmb3JtL3ZpdmlkL3ZpdmlkLXRwZy5oCmluZGV4IDlkYzQ2M2E0Li4z
ZGVjMmNhIDEwMDY0NAotLS0gYS9kcml2ZXJzL21lZGlhL3BsYXRmb3JtL3ZpdmlkL3ZpdmlkLXRw
Zy5oCisrKyBiL2RyaXZlcnMvbWVkaWEvcGxhdGZvcm0vdml2aWQvdml2aWQtdHBnLmgKQEAgLTE0
Miw2ICsxNDIsMTQgQEAgc3RydWN0IHRwZ19kYXRhIHsKIAkvKiBzaXplIGluIGJ5dGVzIGZvciB0
d28gcGl4ZWxzIGluIGVhY2ggcGxhbmUgKi8KIAl1bnNpZ25lZAkJCXR3b3BpeGVsc2l6ZVtUUEdf
TUFYX1BMQU5FU107CiAJdW5zaWduZWQJCQlieXRlc3BlcmxpbmVbVFBHX01BWF9QTEFORVNdOwor
CS8qCisJICogVmVydGljYWwgYW5kIGhvcml6b250YWwgZG93bnNhbXBsZSBmYWN0b3JzLiBPbmx5
IGFwcGxpZXMgdG8gWVVWIGZvcm1hdHMsCisJICogY29uY3JldGVseSBDaHJvbWEgY29tcG9uZW50
cyAobm90IHRoZSBMdW1hKSwgYW5kIGltcGxpZXMgdGhhdCB0aGUgZm9ybWF0CisJICogaXMgcGxh
bmFyICgyIG9yIDMgcGxhbmVzKS4gT25seSBldmVuIG51bWJlcnMgYXJlIGFsbG93ZWQuIFR5cGlj
YWwgdmFsdWVzCisJICogaW5jbHVkZSAwIGZvciBubyBkb3duc2FtcGxpbmcgYW5kIDIgKGxpa2Ug
aW4gNDoyOjAgZm9ybWF0cywgZS5nLiBZVVY0MjApLgorCSAqLworCXVuc2lnbmVkICAgICAgdmVy
dGljYWxfZG93bnNhbXBsaW5nOworCXVuc2lnbmVkICAgICAgaG9yaXpvbnRhbF9kb3duc2FtcGxp
bmc7CiAKIAkvKiBDb25maWd1cmF0aW9uICovCiAJZW51bSB0cGdfcGF0dGVybgkJcGF0dGVybjsK
QEAgLTE2Niw3ICsxNzQsMTAgQEAgc3RydWN0IHRwZ19kYXRhIHsKIAlib29sCQkJCXJlY2FsY19s
aW5lczsKIAlib29sCQkJCXJlY2FsY19zcXVhcmVfYm9yZGVyOwogCi0JLyogVXNlZCB0byBzdG9y
ZSBUUEdfTUFYX1BBVF9MSU5FUyBsaW5lcywgZWFjaCB3aXRoIHVwIHRvIHR3byBwbGFuZXMgKi8K
KwkvKgorCSAqICBVc2VkIHRvIHN0b3JlIFRQR19NQVhfUEFUX0xJTkVTIGxpbmVzLCBlYWNoIHdp
dGggdXAgdG8gVFBHX01BWF9QTEFORVMKKwkgKiAgcGxhbmVzCisJICovCiAJdW5zaWduZWQJCQlt
YXhfbGluZV93aWR0aDsKIAl1OAkJCQkqbGluZXNbVFBHX01BWF9QQVRfTElORVNdW1RQR19NQVhf
UExBTkVTXTsKIAl1OAkJCQkqcmFuZG9tX2xpbmVbVFBHX01BWF9QTEFORVNdOwpAQCAtMTg2LDYg
KzE5Nyw4IEBAIHZvaWQgdHBnX2dlbl90ZXh0KHN0cnVjdCB0cGdfZGF0YSAqdHBnLAogdm9pZCB0
cGdfY2FsY190ZXh0X2Jhc2VwKHN0cnVjdCB0cGdfZGF0YSAqdHBnLAogCQl1OCAqYmFzZXBbVFBH
X01BWF9QTEFORVNdWzJdLCB1bnNpZ25lZCBwLCB1OCAqdmJ1Zik7CiB2b2lkIHRwZ19maWxsYnVm
ZmVyKHN0cnVjdCB0cGdfZGF0YSAqdHBnLCB2NGwyX3N0ZF9pZCBzdGQsIHVuc2lnbmVkIHAsIHU4
ICp2YnVmKTsKK3ZvaWQgdHBnX2FwcGx5X2Rvd25zYW1wbGluZyhzdHJ1Y3QgdHBnX2RhdGEgKnRw
ZywgdjRsMl9zdGRfaWQgc3RkLCB1bnNpZ25lZCBwLAorCQl1OCAqdmJ1Zik7CiBib29sIHRwZ19z
X2ZvdXJjYyhzdHJ1Y3QgdHBnX2RhdGEgKnRwZywgdTMyIGZvdXJjYyk7CiB2b2lkIHRwZ19zX2Ny
b3BfY29tcG9zZShzdHJ1Y3QgdHBnX2RhdGEgKnRwZywgY29uc3Qgc3RydWN0IHY0bDJfcmVjdCAq
Y3JvcCwKIAkJY29uc3Qgc3RydWN0IHY0bDJfcmVjdCAqY29tcG9zZSk7CmRpZmYgLS1naXQgYS9k
cml2ZXJzL21lZGlhL3BsYXRmb3JtL3ZpdmlkL3ZpdmlkLXZpZC1jb21tb24uYyBiL2RyaXZlcnMv
bWVkaWEvcGxhdGZvcm0vdml2aWQvdml2aWQtdmlkLWNvbW1vbi5jCmluZGV4IDZiZWYxZTYuLjk5
ZTBkMjIgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbWVkaWEvcGxhdGZvcm0vdml2aWQvdml2aWQtdmlk
LWNvbW1vbi5jCisrKyBiL2RyaXZlcnMvbWVkaWEvcGxhdGZvcm0vdml2aWQvdml2aWQtdmlkLWNv
bW1vbi5jCkBAIC03Myw2ICs3MywzNCBAQCBzdHJ1Y3Qgdml2aWRfZm10IHZpdmlkX2Zvcm1hdHNb
XSA9IHsKIAkJLnBsYW5lcyAgID0gMSwKIAl9LAogCXsKKwkJLm5hbWUgICAgID0gIllVViA0OjI6
MCwgcGxhbmFyLCAxIENocm9tYSBwbGFuZSIsCisJCS5mb3VyY2MgICA9IFY0TDJfUElYX0ZNVF9O
VjEyLAorCQkuZGVwdGggICAgPSAxMiwKKwkJLmlzX3l1diAgID0gdHJ1ZSwKKwkJLnBsYW5lcyAg
ID0gMSwKKwl9LAorCXsKKwkJLm5hbWUgICAgID0gIllWVSA0OjI6MCwgcGxhbmFyLCAxIENocm9t
YSBwbGFuZSIsCisJCS5mb3VyY2MgICA9IFY0TDJfUElYX0ZNVF9OVjIxLAorCQkuZGVwdGggICAg
PSAxMiwKKwkJLmlzX3l1diAgID0gdHJ1ZSwKKwkJLnBsYW5lcyAgID0gMSwKKwl9LAorCXsKKwkJ
Lm5hbWUgICAgID0gIllVViA0OjI6MCwgcGxhbmFyLCAyIENocm9tYSBwbGFuZXMiLAorCQkuZm91
cmNjICAgPSBWNEwyX1BJWF9GTVRfWVVWNDIwLAorCQkuZGVwdGggICAgPSAxMiwKKwkJLmlzX3l1
diAgID0gdHJ1ZSwKKwkJLnBsYW5lcyAgID0gMSwKKwl9LAorCXsKKwkJLm5hbWUgICAgID0gIllW
VSA0OjI6MCwgcGxhbmFyLCAyIENocm9tYSBwbGFuZXMiLAorCQkuZm91cmNjICAgPSBWNEwyX1BJ
WF9GTVRfWVZVNDIwLAorCQkuZGVwdGggICAgPSAxMiwKKwkJLmlzX3l1diAgID0gdHJ1ZSwKKwkJ
LnBsYW5lcyAgID0gMSwKKwl9LAorCXsKIAkJLm5hbWUgICAgID0gIlJHQjU2NSAoTEUpIiwKIAkJ
LmZvdXJjYyAgID0gVjRMMl9QSVhfRk1UX1JHQjU2NSwgLyogZ2dnYmJiYmIgcnJycnJnZ2cgKi8K
IAkJLmRlcHRoICAgID0gMTYsCg==
--001a11332f080e9301050ec6c950--
