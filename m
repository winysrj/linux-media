Return-path: <linux-media-owner@vger.kernel.org>
Received: from mga02.intel.com ([134.134.136.20]:29764 "EHLO mga02.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1750943AbdG3GcE (ORCPT <rfc822;linux-media@vger.kernel.org>);
        Sun, 30 Jul 2017 02:32:04 -0400
Date: Sun, 30 Jul 2017 14:31:52 +0800
From: kbuild test robot <lkp@intel.com>
To: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
Cc: kbuild-all@01.org, linux-media@vger.kernel.org,
        Laurent Pinchart <laurent.pinchart@ideasonboard.com>,
        Hans Verkuil <hverkuil@xs4all.nl>,
        Guennadi Liakhovetski <guennadi.liakhovetski@intel.com>
Subject: [PATCH] uvcvideo: fix ifnullfree.cocci warnings
Message-ID: <20170730063151.GA22846@lkp-nex05>
References: <201707301426.vKSguE4n%fengguang.wu@intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1501245205-15802-6-git-send-email-g.liakhovetski@gmx.de>
Sender: linux-media-owner@vger.kernel.org
List-ID: <linux-media.vger.kernel.org>

drivers/media/usb/uvc/uvc_ctrl.c:1327:2-7: WARNING: NULL check before freeing functions like kfree, debugfs_remove, debugfs_remove_recursive or usb_free_urb is not needed. Maybe consider reorganizing relevant code to avoid passing NULL values.

 NULL check before some freeing functions is not needed.

 Based on checkpatch warning
 "kfree(NULL) is safe this check is probably not required"
 and kfreeaddr.cocci by Julia Lawall.

Generated by: scripts/coccinelle/free/ifnullfree.cocci

Fixes: c698cbbd35da ("uvcvideo: send a control event when a Control Change interrupt arrives")
CC: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
---

 uvc_ctrl.c |    3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

--- a/drivers/media/usb/uvc/uvc_ctrl.c
+++ b/drivers/media/usb/uvc/uvc_ctrl.c
@@ -1322,9 +1322,8 @@ void uvc_ctrl_status_event(struct uvc_de
 		return;
 
 	spin_lock(&w->lock);
-	if (w->data)
 		/* A previous event work hasn't run yet, we lose 1 event */
-		kfree(w->data);
+	kfree(w->data);
 
 	w->data = kmalloc(len, GFP_ATOMIC);
 	if (w->data) {
